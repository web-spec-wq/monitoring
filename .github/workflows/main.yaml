# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# our first workflow to run on pull request
name: Monitoring workflow
on:
  # This workflow is triggered on pull request to the main
  pull_request:
    types:
      - opened           # when a pull-request is opened
    branches:
      - main 
  workflow_dispatch:  
  
jobs:
  check-skip-ci:
    # This job checks if the commit message contains [skip ci] or [ci skip]
    # If it does, it will skip the workflow
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check-skip-ci.outputs.skip }}
    steps:
      - name: Checkout code 
        uses: actions/checkout@v2
      - name: Check for [skip ci] or [ci skip]
        id: check-skip-ci
        run: |
          echo "Checking for [skip ci] or [ci skip] in commit message"
          msg="$(git log -1 --pretty=%B)"
          echo "Commit message: $msg"
          if [[ "$msg" == *"[skip ci]"* || "$msg" == *"[ci skip]"* ]]; then
            echo "Skipping workflow"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Running workflow"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
  test-build:
    needs: check-skip-ci
    if: needs.check-skip-ci.outputs.skip == 'false'
    # runner: ubuntu-latest
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout code 
      uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
        # cache: 'pip'
    # This step sets up Docker Buildx, which is a Docker CLI plugin for extended build capabilities with BuildKit
    - name: set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Install dependencies
      run: |
        echo "${{  toJson(github.event) }}" > inputs.json
        python -m pip install --upgrade pip
        pip install flask prometheus_client pytest
        pip install flake8
    # Testing the python code with flake8 and pytest
    - name: Run linting tests
      run: |
        flake8 --ignore=E501,E203,W503 .
    # Docker login
    - name: Docker credentials.
      uses: docker/login-action@v2
      with:
        # registry: docker.io
        username: ${{ secrets.Docker_USERNAME }}
        password: ${{ secrets.Docker_PASSWORD}} 
    # Tagging the docker image with the current date and time
    # and building the docker image
    - name: Docker tag
      id: version
      run: |
        # Get the current date and time in the format YYYYMMDDHHMM
        VERSION="v$(date +%Y%m%d%H%M)"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.Docker_USERNAME }}/monitoring:${{ env.VERSION }} .
    # Push the docker image to Docker Hub
    - name: Push Docker image
      run: |
        docker push ${{ secrets.Docker_USERNAME }}/monitoring:${{ env.VERSION }}
  # This workflow will deploy the docker image to Kubernetes
  # For more information see: https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-kubernetes
  deploy:
    needs:
      - test-build
      - check-skip-ci
    
    
    if: succes() && needs.check-skip-ci.outputs.skip == 'false'
  
    # This job runs only if the previous job was successful
    # runner: ubuntu-latest
    runs-on: ubuntu-latest
    # environment variables avaiable to all steps in this job only
    env:
      VERSION: ${{ needs.test-build.outputs.version }}


        
    steps:
    # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout code 
      uses: actions/checkout@v2        
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install flask prometheus_client pytest
    #     pip install flake8
    - name: Deploy to Kubernetes
      run: |
        sed -i "s|image: shrutichittora49/monitoring:.*|image: shrutichittora49/monitoring:${{ env.VERSION }}|g" manifests/app-deployment.yaml
    # setup git and commit the changes        
    - name: Setup Git
      run: |
        git config --local user.name "Shruti"
        git config --local user.email "shrutichittora49@gmail.com"
      # Checkout the branch and fetch the latest changes
    - name: Commit changes
      run: | 
        echo "branch_name=${{ github.head_ref }}" >> $GITHUB_ENV
        echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
        git log --oneline
        git fetch origin workflow/integration
        git checkout -B workflow/integration origin/workflow/integration || git checkout -b workflow/integration
        echo "branch_name=${{ github.head_ref }}" >> $GITHUB_ENV
        echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
        git log --oneline
        git add manifests/app-deployment.yaml
        git commit -m "Updated image version to $VERSION" || echo "No changes to commit"
    # Push the changes to the branch
    # As we are committing the changes, so to consider the latest changes
    # from the branch, we need to pull the latest changes from the branch before pushing
    # This is to avoid the error: "error: failed to push some refs to 'origin'"
    - name: Push changes
      run: |
        echo "branch_name=${{ github.head_ref }}" >> $GITHUB_ENV
        echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
        git log --oneline
        git pull --rebase origin workflow/integration || echo "Nothing to pull"
        echo "branch_name=${{ github.head_ref }}" >> $GITHUB_ENV
        echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
        git push origin workflow/integration
        git log --oneline


      

  report:
    needs:
      - test-build
      - deploy
      - check-skip-ci
      
    if: needs.test-build.results == 'failure' || needs.deploy.results == 'failure' || needs.check-skip-ci.outputs.skip == 'true'

    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "This workflow has failed or was skipped."
          echo "Check the logs for more information."
          echo "Commit message: ${{ github.event.head_commit.message }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Workflow run ID: ${{ github.run_id }}"
